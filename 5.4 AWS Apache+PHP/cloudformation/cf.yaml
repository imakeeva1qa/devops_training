AWSTemplateFormatVersion: 2010-09-09

Parameters:
  UserData:
    Type: String
  KeyName:
    Description: ec2 key pair
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: eu-north-1a
      ImageId: ami-0233c2d874b811deb
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      UserData:
        - !Ref: UserData

  # security group
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::GetAtt:
              - ELBSecurityGroup
              - GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Load Balancer for EC2
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ELB
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value:
            !Join
            - ''
            - - 'elb-'
              - !Ref 'AWS::StackName'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      HealthCheckEnabled: 'true'
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance
          Port: 80
      TargetType: instance
      HealthCheckIntervalSeconds: '10'
      HealthyThresholdCount: '2'
      UnhealthyThresholdCount: '3'
      HealthCheckTimeoutSeconds: '5'
      VpcId: !Ref VPC
      ServiceToken:
      Matcher:
        HttpCode: 200,302